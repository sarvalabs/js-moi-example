// A simple logic with an owner and list of todos
// where todo's can be added, retrieved and marked as completed
// only by the onwer who deploy's the logic

////////////////////////
// Module Name
///////////////////////
coco TodoList

////////////////////////
// Persisitent State
///////////////////////

// The persistant state is used to define stateful
// values managed intrinsically by the logic
// Statmemoryiables can be also be accessed by using
// theimemoryiable names as endpoints
state persistent:
    todos []Todo
    owner Address

////////////////////////
// Custom Classes
///////////////////////

// The class Todo is a structure for defining a Todo datatype,
// where it can possess multiple fields and methods
class Todo:
    field id U64
    field name String
    field completed Bool

////////////////////////
// Deploy Endpoints
///////////////////////

// InitOwner!() deployer is a constructor that assigns a 
// value to the statmemoryiable owner
endpoint deployer persistent InitOwner():
    mutate Address(Sender) -> TodoList.State.owner

////////////////////////
// Internal Functions 
///////////////////////

// Function to check if the caller is the owner of the Logic
func readonly onlyOwner():
    observe owner <- TodoList.State.owner:
        if(Address(Sender) != owner):
            throw "Not an Owner"

// func's can only be called internally within the logic

////////////////////////
// Mutate/Write Endpoints
///////////////////////

// Add!() is an invokable that adds the given Todo to
// the list of  Todo's
endpoint invokable persistent AddTodo(name String)->(addedTodo Todo):
    onlyOwner()

    mutate todos <- TodoList.State.todos:
        memory newTodo = Todo{id: len(todos), name: name, completed: false}
        disperse append(todos, newTodo)
        yield addedTodo newTodo

// MarkCompleted!() is an invokable that marks the given
// todo as completed
endpoint invokable persistent MarkTodoCompleted(id U64):
    onlyOwner()

    mutate todos <- TodoList.State.todos:
            todos[id].completed = true

// You might have noticed
// We used '!' after the endpoint name
// That is to indicate that this 
// endpoint mutates the logic's state.
// Hence we call them write endpoints

////////////////////////
// Observe/Read Endpoints
///////////////////////

// GetTodos() is an invokable that gets all
// the stored todos
endpoint invokable readonly GetTodos() -> (todos []Todo):   
    memory memTodos []Todo
    observe sTodos <- TodoList.State.todos:
        for index, todo in sTodos:
            memory memTodo = Todo{
                id: todo.id,
                name: todo.name,
                completed: todo.completed
            }
            append(memTodos, memTodo)
    todos = memTodos
            



