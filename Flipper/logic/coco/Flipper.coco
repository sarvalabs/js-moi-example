// A simple logic with an internal boolean state
// that can be retrieved and flipped.

////////////////////////
// Module Name
///////////////////////
coco Flipper

////////////////////////
// Persisitent State
///////////////////////

// The persistant state is used to define stateful
// values managed intrinsically by the logic
// State variables can be also be accessed by using
// their variable names as endpoints
state persistent:
    value Bool

////////////////////////
// Deploy Endpoints
///////////////////////

// Init!() deployer is a constructor that iniitializes the persistent
// state variable to their default values at the deploy time.
endpoint deployer persistent Init():
    pass

// Seed!() deployer is an alternate constructor
// that sets given initial value for the logic state.
endpoint deployer persistent Seed(initial Bool):
    set(value: initial)

////////////////////////
// Internal Functions 
//////////////////////

// set!() is a local function that
// sets given value to the logic state
func persistent set(value Bool):
    mutate value -> Flipper.State.value

// func's can only be called internally within the logic

////////////////////////
// Mutate/Write Endpoints
///////////////////////

// Toggle!() is an invokable that flips
// the current value of the logic state
endpoint invokable persistent Flip():
    mutate value <- Flipper.State.value:
        value = !value

////////////////////////
// Observe/Read Endpoints
///////////////////////

// Get() is an invokable that returns
// the current value of the logic state
endpoint invokable readonly Get() -> (value Bool):
    observe value <- Flipper.State.value