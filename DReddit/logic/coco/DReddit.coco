// Logic Name
coco DReddit

////////////////////////
////// Logic State 
//////////////////////
state persistent:
    // Mapping of id => Post
    posts []Post

    // Mapping of Address => U64 => U64
    // UserAddress(Address) => id(U64) => 0, 1, 2(U64)
    // 0 for not voted, 1 for upvoted, 2 for downvoted
    votes Map[Address]Map[U64]U64

////////////////////////
////// Classes
//////////////////////

// The class Todo is a structure for defining a Todo,
// where it can possess multiple fields and methods
class Post:
    field id U64
    field creator Address
    field content String
    field upvotes U64
    field downvotes U64

////////////////////////
////// Deployer Endpoints
//////////////////////

// Init!() deployer is a constructor that leaves
// the persistent state untouched at the deploy time.
endpoint deployer persistent Init():
    pass

// pass means do nothing

////////////////////////
////// Write Endpoints
//////////////////////

// "!" after endpoint name means endpoint mutates
// the logic state 

// CreatePost!() is an invokable that creates & adds a new post
// and also returns the new post
endpoint invokable persistent CreatePost(content String) -> (createdPost Post):
    memory newPost = Post{
        creator: Address(Sender),
        content: content,
        upvotes: 0,
        downvotes: 0
    }

    // "<-" is used to read and then mutate the state
    // (Here the final value of posts in the context 
    // block will be assigned to DReddit.State.posts)
    mutate posts <- DReddit.State.posts:
        newPost.id = len(posts)
        disperse append(posts, newPost)
        yield createdPost newPost // To return Created Post

// Upvote!() is an invokable to upvote
// the post with given id
endpoint invokable persistent Upvote(id U64):
    memory user Address = Address(Sender)
    memory usersVote U64

    // observe is used to read from the state
    observe votes <- DReddit.State.votes:
        usersVote = votes[user][id]  // This is able to read the value from a key that not exists

    // throw is used to throw an error 
    // statement reverting all the state changes
    if(usersVote == 1):
        throw "Already Upvoted"
    
    // Mutating user's vote for the given post
    mutate votes <- DReddit.State.votes:
        if(usersVote == 0):
            disperse make(Map[U64]U64) -> votes[user] // An extra step - throwing key does not exist
        votes[user][id] = 1

    // Updating Post's total count of downvotes and upvotes
    mutate allPosts <- DReddit.State.posts:
        allPosts[id].upvotes += 1
        if(usersVote == 2):
            allPosts[id].downvotes -= 1

// Downvote!() is an invokable to downvote
// the post with given id
endpoint invokable persistent Downvote(id U64):
    memory user Address = Address(Sender)
    memory usersVote U64

    observe votes <- DReddit.State.votes:
        usersVote = votes[user][id]

    if(usersVote == 2):
        throw "Already Downvoted"
    
    // Mutating user's vote for the given post
    mutate votes <- DReddit.State.votes:
        if(usersVote == 0):
            disperse make(Map[U64]U64) -> votes[user]
        votes[user][id] = 2

    // Updating Post's total count of downvotes and upvotes
    mutate allPosts <- DReddit.State.posts:
        allPosts[id].downvotes += 1  
        if(usersVote == 1):
            allPosts[id].upvotes -= 1

//////////////////////
////// Read Endpoints
////////////////////

endpoint invokable GetPosts() -> (posts []Post):
    memory memPosts []Post
    observe sPosts <- DReddit.State.posts:
        for index, post in sPosts:
            memory memPost Post
            memPost = Post {
                id: post.id,
                creator: post.creator,
                content: post.content,
                upvotes: post.upvotes,
                downvotes: post.downvotes
            }
            append(memPosts, memPost)
    posts = memPosts

// getUsersVote() is an invokable endpoint to retrieve
// the vote of the current user for a specific post (id)
endpoint invokable GetUserVote(id U64, user Address) -> (vote U64): 
    observe votes <- DReddit.State.votes:
        vote = votes[user][id]